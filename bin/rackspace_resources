#!/usr/bin/env ruby

%w(bogo multi_json nokogiri fileutils).each do |lib|
  begin
    require lib
  rescue LoadError
    $stderr.puts "Failed to load required library: `#{lib}` !"
    $stderr.puts "  > gem install #{lib}"
    exit -1
  end
end

STORE = '/tmp/rackspace-docs'

unless (File.directory?(STORE))
  FileUtils.mkdir_p(STORE)
  Dir.chdir(STORE) do
    unless (system('wget -O openstack.html -q "https://developer.rackspace.com/docs/cloud-orchestration/v1/resources-reference/openstack/"'))
      puts "FAILED: Documentation fetching failed!"
      exit -1
    end
    unless (system('wget -O rackspace.html -q "https://developer.rackspace.com/docs/cloud-orchestration/v1/resources-reference/rackspace/"'))
      puts "FAILED: Documentation fetching failed!"
      exit -1
    end
  end
end

o_file = Nokogiri::HTML(File.open(File.join(STORE, 'openstack.html'), 'r'))
r_file = Nokogiri::HTML(File.open(File.join(STORE, 'rackspace.html'), 'r'))

heat_resources = {}

[[o_file, 'openstack'], [r_file, 'rackspace']].each do |file, target|
  file.css("div##{target}-resource-types").children.each do |resource|
    next unless resource.get_attribute(:class) == 'section'
    resource_name = resource.css('h2').text.strip
    resource_name.slice!(resource_name.size - 1, 1)
    properties = {}
    required_properties = resource.css("div[id='#{resource_name}-props-req']")
    optional_properties = resource.css("div[id='#{resource_name}-props-opt']")
    [required_properties, optional_properties].each_with_index do |property_list, idx|
      if (property_list)
        property_list.children.each do |prop|
          next unless prop.get_attribute(:id).to_s.start_with?("#{resource_name}-prop-")
          property_name = prop.get_attribute(:id).to_s.sub("#{resource_name}-prop-", '')
          next if property_name.include?('-')
          p_data = prop.children.find_all do |element|
            element.name == 'p'
          end
          update_text = p_data[2] ? p_data[2].text.downcase : ''
          if (update_text.include?('without replacement'))
            update_causes = :none
          elsif (update_text.include?('replacement'))
            update_causes = :replacement
          else
            update_causes = :unknown
          end
          properties[property_name] = {
            :description => p_data.first.text.strip.split("\n").map(&:strip).join(' '),
            :required => idx == 0,
            :type => p_data[1].text.strip.split(' ').first.to_s.downcase,
            :update_causes => update_causes,
          }
        end
      end
    end
    heat_resources[resource_name] = {
      :properties => properties.keys.sort,
      :full_properties => properties,
    }
  end
end

puts MultiJson.dump(heat_resources.to_smash(:sorted), :pretty => true)
