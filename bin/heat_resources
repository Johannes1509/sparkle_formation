#!/usr/bin/env ruby

%w(bogo multi_json nokogiri fileutils).each do |lib|
  begin
    require lib
  rescue LoadError
    $stderr.puts "Failed to load required library: `#{lib}` !"
    $stderr.puts "  > gem install #{lib}"
    exit -1
  end
end

STORE = "/tmp/openstack-heat-docs"

unless (File.directory?(STORE))
  FileUtils.mkdir_p(STORE)
  Dir.chdir(STORE) do
    unless (system('wget -q "http://docs.openstack.org/developer/heat/template_guide/openstack.html"'))
      puts "FAILED: Documentation fetching failed!"
      exit -1
    end
  end
end

file = Nokogiri::HTML(File.open(File.join(STORE, "openstack.html"), "r"))

heat_resources = {}

file.css("div#openstack-resource-types").children.each do |resource|
  next unless resource.get_attribute(:class) == "section"
  resource_name = resource.get_attribute(:id)
  properties = {}
  required_properties = resource.css("div[id='#{resource_name}-props-req']")
  optional_properties = resource.css("div[id='#{resource_name}-props-opt']")
  [required_properties, optional_properties].each_with_index do |property_list, idx|
    if property_list
      property_list.css("div").each do |prop|
        next unless prop.get_attribute(:id).to_s.start_with?("#{resource_name}-prop-")
        property_name = prop.get_attribute(:id).to_s.sub("#{resource_name}-prop-", "")
        next if property_name.include?("-")
        p_data = prop.css("dd > div[class*='line']")
        update_text = p_data[2] ? p_data[2].text.downcase : ""
        if (update_text.include?("without replacement"))
          update_causes = :none
        elsif (update_text.include?("replacement"))
          update_causes = :replacement
        else
          update_causes = :unknown
        end
        properties[property_name] = {
          :description => p_data.first.text.strip.split("\n").map(&:strip).join(" "),
          :required => idx == 0,
          :type => p_data[1].text.strip.split(" ").first.to_s.downcase,
          :update_causes => update_causes,
        }
      end
    end
  end
  heat_resources[resource_name] = {
    :properties => properties.keys.sort,
    :full_properties => properties,
  }
end

file_path = File.join(File.dirname(File.dirname(__FILE__)),
  "lib", "sparkle_formation", "resources", "heat_resources.json")
$stdout.puts "Writing resource file: #{file_path}"
File.open(file_path, "w+") do |file|
  file.puts MultiJson.dump(heat_resources.to_smash(:sorted), :pretty => true)
end
